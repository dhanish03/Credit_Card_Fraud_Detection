# -*- coding: utf-8 -*-
"""ccfraud_detectio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1458UWQNE97P0n6C3NYbXDcW3G8rw243O
"""

#import libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#load data set
credit_card_data = pd.read_csv('/content/creditcard.csv')

credit_card_data.head()

credit_card_data.tail()

credit_card_data.info()

credit_card_data.isnull().sum()

credit_card_data['Class'].value_counts()

"""0 --> Normal Transaction                                                                    
1 --> Fraudulent Transaction
"""

#separating data from analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

#statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

#compare values for both transactions
credit_card_data.groupby('Class').mean()

"""Under - Sampling

Build sample dataset containing similar distribution of normal transactions and fraudulent transactions.

Number of fraudulent transactions --> 103
"""

legit_sample = legit.sample(n=103)

"""concatenating two dataframes"""

new_dataset = pd.concat([legit_sample,fraud],axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""splitting data into features and target

"""

X = new_dataset.drop(columns='Class',axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""split data into training data and testing data"""

X_train, X_test, Y_train, Y_test =train_test_split(X, Y, test_size=0.2,stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""logistic regression"""

model = LogisticRegression()

"""Accuracy Score"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test )

print('Accuracy score on data', test_data_accuracy)